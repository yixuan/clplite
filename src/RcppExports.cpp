// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// clp_solve_
List clp_solve_(NumericMatrix obj, S4 mat, NumericVector constr_lb, NumericVector constr_ub, NumericVector var_lb, NumericVector var_ub, bool obj_max, List control);
RcppExport SEXP clplite_clp_solve_(SEXP objSEXP, SEXP matSEXP, SEXP constr_lbSEXP, SEXP constr_ubSEXP, SEXP var_lbSEXP, SEXP var_ubSEXP, SEXP obj_maxSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type obj(objSEXP);
    Rcpp::traits::input_parameter< S4 >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type constr_lb(constr_lbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type constr_ub(constr_ubSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_lb(var_lbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_ub(var_ubSEXP);
    Rcpp::traits::input_parameter< bool >::type obj_max(obj_maxSEXP);
    Rcpp::traits::input_parameter< List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(clp_solve_(obj, mat, constr_lb, constr_ub, var_lb, var_ub, obj_max, control));
    return rcpp_result_gen;
END_RCPP
}
// clp_solve_parallel_
List clp_solve_parallel_(NumericMatrix obj, S4 mat, NumericVector constr_lb, NumericVector constr_ub, NumericVector var_lb, NumericVector var_ub, bool obj_max, List control);
RcppExport SEXP clplite_clp_solve_parallel_(SEXP objSEXP, SEXP matSEXP, SEXP constr_lbSEXP, SEXP constr_ubSEXP, SEXP var_lbSEXP, SEXP var_ubSEXP, SEXP obj_maxSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type obj(objSEXP);
    Rcpp::traits::input_parameter< S4 >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type constr_lb(constr_lbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type constr_ub(constr_ubSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_lb(var_lbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_ub(var_ubSEXP);
    Rcpp::traits::input_parameter< bool >::type obj_max(obj_maxSEXP);
    Rcpp::traits::input_parameter< List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(clp_solve_parallel_(obj, mat, constr_lb, constr_ub, var_lb, var_ub, obj_max, control));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"clplite_clp_solve_", (DL_FUNC) &clplite_clp_solve_, 8},
    {"clplite_clp_solve_parallel_", (DL_FUNC) &clplite_clp_solve_parallel_, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_clplite(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
